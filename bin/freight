#!/usr/bin/env node

var optlist = {
  help: {
    short: 'h',
    info: 'Display help.',
    type: Boolean
  },
  url: {
    short: 'u',
    info: 'Freight Server URL. Example: "http://example.com"',
    type: require("url")
  },
  production: {
    info: 'Download production required bundle only.',
    type: Boolean
  },
  directory: {
    info: 'Optional path to project.',
    type: String
  },
  verbose: {
    short: 'v',
    info: 'Verbose mode. A lot more information output.',
    type: Boolean
  },
  version: {
    short: 'V',
    info: 'Display Freight CLI version.',
    type: Boolean
  },
  force: {
    short: 'f',
    info: 'A way to force create a bundle. Requires password and create commands.',
    type: Boolean
  },
  silent: {
    info: 'No output.',
    type: Boolean
  }
};

var actions = {
  get: {
    info: 'Default action. Download and extract bundle for the current project directory.',
    usage: '`freight get -u=http://example.com`'
  },
  create: {
    info: 'Create a bundle for the current project directory on a remote server. Requires password.',
    usage: '`freight create -u=http://example.com`'
  },
  track: {
    info: 'Track a remote repository for dependency changes. ' +
          'Freight will automatically create bundles.',
    usage: '`freight track git@github.com:user/repo.git -u=http://example.com`'
  }
};

var availableActions = Object.keys(actions);

// Parse `optlist` into a form that nopt can handle.
var aliases = {};
var known = {};

Object.keys(optlist).forEach(function (key) {
  var short = optlist[key].short;
  if (short) {
    aliases[short] = '--' + key;
  }
  known[key] = optlist[key].type;
});

// everything is optional.
// knownOpts and shorthands default to {}
// arg list defaults to process.argv
// slice defaults to 2
var options = require("../modules/nopt/nopt")(known, aliases, process.argv, 2);
var action = options.argv.remain;
delete options.argv;

// if have an action set, check if it is available
if (action.length > 0) {
  if (availableActions.indexOf(action[0]) > -1) {
    options.action = action[0];
    options.actionParams = action.slice(1);
  } else {
    throw new Error('Invalid Action. Available Actions: ' + availableActions);
  }
}

if (options.help) {
  // display help
  console.log('Freight Actions:');
  Object.keys(actions).forEach(function(key) {
    var i = actions[key];
    console.log('\n' + key + '\n', i.info, '\n Usage: ' + i.usage);
  });
  console.log('\nFreight Flags:');
  Object.keys(optlist).forEach(function(key) {
    var i = optlist[key];
    console.log('\n--' + key + '\n', i.short ? '-' + i.short : '', i.info);
  });
} else {
  var freight = require('../freight')();
  freight.init(options);
}

